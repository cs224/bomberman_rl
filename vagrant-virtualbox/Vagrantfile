# -*- mode: ruby -*-
# vi: set ft=ruby :

# You can login to the master via:
# ssh-add ~/.vagrant.d/insecure_private_key
# ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no vagrant@192.168.56.100
# ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p 2222 vagrant@localhost

# vagrant plugin install vagrant-reload
# vagrant plugin install vagrant-vbguest


Vagrant.require_version ">= 1.6.0"

boxes = [
    {
        :name => "master",
        :eth1 => "192.168.56.100",
        :mem => "2048",
        :cpu => "2"
    },
]

#base_storage_disk_path = Vagrant::Util::Platform.fs_real_path("#{user_home_path}/VirtualBox VMs/#{vm_name}/ubuntu-16.04-amd64-disk001.vmdk")

Vagrant.configure(2) do |config|

  if Vagrant.has_plugin?("vagrant-vbguest")
    config.vbguest.auto_update = false
  end

  config.ssh.forward_agent = true
  config.ssh.forward_x11 = true
  config.ssh.insert_key = false
  config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'"

  config.vm.synced_folder ".", "/vagrant"

  boxes.each do |opts|
      config.vm.define opts[:name] do |config|
        config.vm.hostname = opts[:name]

        config.vm.box = "generic/ubuntu1804"
        config.vm.box_version = "1.9.14"
        config.vm.box_check_update = false

        config.vm.provider "virtualbox" do |virtualbox|
          virtualbox.gui = true
          virtualbox.customize ["modifyvm", :id, "--memory", opts[:mem]]
          virtualbox.customize ["modifyvm", :id, "--cpus", opts[:cpu]]

          virtualbox.customize ["modifyvm", :id, "--apic", "on"] # turn on I/O APIC
          virtualbox.customize ["modifyvm", :id, "--ioapic", "on"] # turn on I/O APIC
          virtualbox.customize ["modifyvm", :id, "--x2apic", "on"] # turn on I/O APIC
          virtualbox.customize ["modifyvm", :id, "--biosapic", "x2apic"] # turn on I/O APIC
          virtualbox.customize ["modifyvm", :id, "--ostype", "Ubuntu_64"] # set guest OS type
          virtualbox.customize ["modifyvm", :id, "--natdnshostresolver1", "on"] # enables DNS resolution from guest using host's DNS
          virtualbox.customize ["modifyvm", :id, "--natdnsproxy1", "on"] # enables DNS requests to be proxied via the host
          virtualbox.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"] # turn on promiscuous mode on nic 2
          virtualbox.customize ["modifyvm", :id, "--nictype1", "virtio"]
          virtualbox.customize ["modifyvm", :id, "--nictype2", "virtio"]
          virtualbox.customize ["modifyvm", :id, "--pae", "on"] # enables PAE
          virtualbox.customize ["modifyvm", :id, "--longmode", "on"] # enables long mode (64 bit mode in GUEST OS)
          virtualbox.customize ["modifyvm", :id, "--hpet", "on"] # enables a High Precision Event Timer (HPET)
          virtualbox.customize ["modifyvm", :id, "--hwvirtex", "on"] # turn on host hardware virtualization extensions (VT-x|AMD-V)
          virtualbox.customize ["modifyvm", :id, "--nestedpaging", "on"] # if --hwvirtex is on, this enables nested paging
          virtualbox.customize ["modifyvm", :id, "--largepages", "on"] # if --hwvirtex & --nestedpaging are on
          virtualbox.customize ["modifyvm", :id, "--vtxvpid", "on"] # if --hwvirtex on
          virtualbox.customize ["modifyvm", :id, "--vtxux", "on"] # if --vtux on (Intel VT-x only) enables unrestricted guest mode
          virtualbox.customize ["modifyvm", :id, "--boot1", "disk"] # tells vm to boot from disk only
          virtualbox.customize ["modifyvm", :id, "--rtcuseutc", "on"] # lets the real-time clock (RTC) operate in UTC time
          virtualbox.customize ["modifyvm", :id, "--audio", "none"] # turn audio off
          virtualbox.customize ["modifyvm", :id, "--clipboard", "bidirectional"] # disable clipboard
          virtualbox.customize ["modifyvm", :id, "--accelerate3d", "on"]
          virtualbox.customize ["modifyvm", :id, "--usbehci", "off"] # disable usb hot-plug drivers

          # VBoxManage showvminfo vagrant-virtualbox_master_1516862154603_94512 | less -i
          virtualbox.customize ["modifyvm", :id, "--vrde", "on"]
          virtualbox.customize ["modifyvm", :id, "--vrdeproperty", "TCP/Address=0.0.0.0"]
          virtualbox.customize ["modifyvm", :id, "--vrdeproperty", "TCP/Ports=3389"]

          virtualbox.customize [ "setextradata", :id, "VBoxInternal/Devices/VMMDev/0/Config/GetHostTimeDisabled", 0 ] # turns the timesync on
          virtualbox.customize [ "guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-interval", 10000 ] # sync time every 10 seconds
          virtualbox.customize [ "guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-min-adjust", 100 ] # adjustments if drift > 100 ms
          virtualbox.customize [ "guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-set-on-restore", 1 ] # sync time on restore
          virtualbox.customize [ "guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-set-start", 1 ] # sync time on start
          virtualbox.customize [ "guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-set-threshold", 1000 ] # at 1 second drift, the time will be set and not "smoothly" adjusted
          virtualbox.customize ['modifyvm', :id, '--cableconnected1', 'on'] # fix for https://github.com/mitchellh/vagrant/issues/7648
          virtualbox.customize ['modifyvm', :id, '--cableconnected2', 'on'] # fix for https://github.com/mitchellh/vagrant/issues/7648
          #virtualbox.customize ['storagectl', :id, '--name', 'SATA Controller', '--hostiocache', 'on'] # use host I/O cache
          #virtualbox.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 0, '--device', 0, '--type', 'hdd', '--nonrotational', 'on', '--medium', "#{base_storage_disk_path}"]

        end

        config.vm.network :private_network, ip: opts[:eth1]

        #config.vm.provision "shell", privileged: false, inline: "apt-get install lubuntu-desktop -y", keep_color: true, name: "install_desktop"

        config.vm.provision "shell", name: "apt-get update and basic install", inline: <<-SHELL

          #ENVIRONMENT
          sudo echo "LANG=en_US.UTF-8" >> /etc/environment
          sudo echo "LANGUAGE=en_US.UTF-8" >> /etc/environment
          sudo echo "LC_ALL=en_US.UTF-8" >> /etc/environment
          sudo echo "LC_CTYPE=en_US.UTF-8" >> /etc/environment

          #REPOSITORIES
          sudo apt-get update
          # sudo apt-get -y upgrade

          #g++, git, curl...
          echo "instalando g++..."
          sudo apt-get install -y g++
          echo "instalando GIT..."
          sudo apt-get install -y git
          echo "instalando CURL..."
          sudo apt-get install -y curl

          #DESKTOP
          # ensure german keyboard layout when using a shell
          echo 'setxkbmap de' >> /home/vagrant/.bashrc

          echo "install langauge packs"
          apt-get install -y language-pack-de language-pack-de-base
          apt-get install -y `check-language-support -l de`
          apt-get install -y `check-language-support -l en`

          echo "install lubuntu-core desktop"
          apt-get install -y virtualbox-guest-dkms virtualbox-guest-utils virtualbox-guest-x11 lubuntu-core
          # apt-get install -y lubuntu-core # lubuntu-desktop # kubuntu-desktop sddm language-pack-kde-de
          sed -i 's/allowed_users=.*$/allowed_users=anybody/' /etc/X11/Xwrapper.config

          update-desktop-database

        SHELL

        # config.vm.provision "shell", name: "anaconda", privileged: false do |script|
        #   script.path = "Anaconda3-2019.03-Linux-x86_64.sh"
        # end

        config.vm.provision "shell", name: "conda_install_and_update", privileged: false, inline: <<-SHELL

          #conda
          # https://repo.anaconda.com/archive/
          # echo "download conda"
          # curl -sO https://repo.continuum.io/archive/Anaconda3-5.0.1-Linux-x86_64.sh
          # curl -sO https://repo.anaconda.com/archive/Anaconda3-2019.03-Linux-x86_64.sh
          echo "install conda"
          sh /vagrant/Anaconda3-2019.03-Linux-x86_64.sh -b -p /home/vagrant/anaconda3

          echo "conda set-up path"
          export PATH="/home/vagrant/anaconda3/bin:$PATH"
          echo 'export PATH="/home/vagrant/anaconda3/bin:$PATH"' >> /home/vagrant/.bashrc

          #echo "conda create conda_root"
          #conda create -n conda_root --clone="/home/vagrant/anaconda3"

          conda update conda -y
          pip install --upgrade pip

          echo "conda init"

          conda init bash

        SHELL

        config.vm.provision "shell", name: "bomberman_rl", privileged: false, inline: <<-SHELL
          __conda_setup="$('/home/vagrant/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
          eval "$__conda_setup"

          git clone https://github.com/cs224/bomberman_rl
          cd bomberman_rl/agent_code/agent_011_shred/conda_environment
          ./create.sh
          conda activate bomberman_rl
        SHELL

      end
  end


end

